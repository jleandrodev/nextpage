const { PrismaClient } = require('@prisma/client');

// Cliente para SQLite (dados antigos)
const sqlitePrisma = new PrismaClient({
  datasources: {
    db: {
      url: 'file:./prisma/dev.db',
    },
  },
});

// Cliente para Supabase PostgreSQL (novo)
const supabasePrisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL, // URL do Supabase
    },
  },
});

async function migrateData() {
  console.log('üöÄ Iniciando migra√ß√£o para Supabase...');

  try {
    // 1. Migrar organiza√ß√µes
    console.log('üìä Migrando organiza√ß√µes...');
    const organizations = await sqlitePrisma.organization.findMany();
    for (const org of organizations) {
      await supabasePrisma.organization.upsert({
        where: { id: org.id },
        update: org,
        create: org,
      });
    }
    console.log(`‚úÖ ${organizations.length} organiza√ß√µes migradas`);

    // 2. Migrar usu√°rios
    console.log('üë• Migrando usu√°rios...');
    const users = await sqlitePrisma.user.findMany();
    for (const user of users) {
      await supabasePrisma.user.upsert({
        where: { id: user.id },
        update: user,
        create: user,
      });
    }
    console.log(`‚úÖ ${users.length} usu√°rios migrados`);

    // 3. Migrar ebooks
    console.log('üìö Migrando ebooks...');
    const ebooks = await sqlitePrisma.ebook.findMany();
    for (const ebook of ebooks) {
      await supabasePrisma.ebook.upsert({
        where: { id: ebook.id },
        update: ebook,
        create: ebook,
      });
    }
    console.log(`‚úÖ ${ebooks.length} ebooks migrados`);

    // 4. Migrar hist√≥rico de pontos
    console.log('üí∞ Migrando hist√≥rico de pontos...');
    const pointsHistory = await sqlitePrisma.pointsHistory.findMany();
    for (const history of pointsHistory) {
      await supabasePrisma.pointsHistory.upsert({
        where: { id: history.id },
        update: history,
        create: history,
      });
    }
    console.log(`‚úÖ ${pointsHistory.length} registros de pontos migrados`);

    // 5. Migrar resgates
    console.log('üéÅ Migrando resgates...');
    const redemptions = await sqlitePrisma.redemption.findMany();
    for (const redemption of redemptions) {
      await supabasePrisma.redemption.upsert({
        where: { id: redemption.id },
        update: redemption,
        create: redemption,
      });
    }
    console.log(`‚úÖ ${redemptions.length} resgates migrados`);

    // 6. Migrar importa√ß√µes
    console.log('üìã Migrando importa√ß√µes...');
    const imports = await sqlitePrisma.pointsImport.findMany();
    for (const import_ of imports) {
      await supabasePrisma.pointsImport.upsert({
        where: { id: import_.id },
        update: import_,
        create: import_,
      });
    }
    console.log(`‚úÖ ${imports.length} importa√ß√µes migradas`);

    console.log('üéâ Migra√ß√£o conclu√≠da com sucesso!');
    console.log('');
    console.log('üìä Resumo da migra√ß√£o:');
    console.log(`   ‚Ä¢ Organiza√ß√µes: ${organizations.length}`);
    console.log(`   ‚Ä¢ Usu√°rios: ${users.length}`);
    console.log(`   ‚Ä¢ Ebooks: ${ebooks.length}`);
    console.log(`   ‚Ä¢ Hist√≥rico de pontos: ${pointsHistory.length}`);
    console.log(`   ‚Ä¢ Resgates: ${redemptions.length}`);
    console.log(`   ‚Ä¢ Importa√ß√µes: ${imports.length}`);
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
  } finally {
    await sqlitePrisma.$disconnect();
    await supabasePrisma.$disconnect();
  }
}

// Executar migra√ß√£o se chamado diretamente
if (require.main === module) {
  migrateData();
}

module.exports = { migrateData };
