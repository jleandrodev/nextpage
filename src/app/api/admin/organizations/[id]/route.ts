import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { OrganizationService } from '@/lib/services/organization.service';

export async function GET(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const resolvedParams = await params;
    console.log('üîç Buscando organiza√ß√£o:', resolvedParams.id);

    // Verificar autentica√ß√£o
    const session = await getServerSession(authOptions);
    console.log('üë§ Sess√£o:', session?.user ? 'Usu√°rio logado' : 'N√£o logado');

    if (!session?.user) {
      console.log('‚ùå Usu√°rio n√£o autorizado');
      return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 });
    }

    console.log('üîë Role do usu√°rio:', session.user.role);

    // Verificar se o usu√°rio √© admin master
    if (session.user.role !== 'ADMIN_MASTER') {
      console.log('‚ùå Acesso negado - n√£o √© admin master');
      return NextResponse.json({ error: 'Acesso negado' }, { status: 403 });
    }

    const organizationService = new OrganizationService();
    const organization = await organizationService.findById(resolvedParams.id);

    console.log('üìã Organiza√ß√£o encontrada:', organization ? 'Sim' : 'N√£o');

    if (!organization) {
      console.log('‚ùå Organiza√ß√£o n√£o encontrada no banco');
      return NextResponse.json({ error: 'Organiza√ß√£o n√£o encontrada' }, { status: 404 });
    }

    console.log('‚úÖ Retornando organiza√ß√£o:', organization.name);
    // Retornar todas as informa√ß√µes da organiza√ß√£o para o admin
    return NextResponse.json(organization);
  } catch (error) {
    console.error('‚ùå Erro ao buscar organiza√ß√£o:', error);
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
}
